#version 450
#extension GL_GOOGLE_include_directive : enable
layout (local_size_x = 16, local_size_y = 16) in;

#define PI 3.14159265358979323
#define TWO_PI 6.28318530717958648
#define INFINITY 1000000.0
#define EPS 0.001

struct BvhNode {
    vec3 bboxMin;
    vec3 bboxMax;
    int leaf;
    int leftIndex;
    int rightIndex;
};

struct Ray {
    vec3 origin;
    vec3 direction;
};

struct IntersectData {
    int objIdx;
    bool hit;
    bool isEmitter;
    float hitDist;
    ivec3 triIdx;
    vec3 bary;
    vec3 hitPosition;
    vec3 normal;
    vec3 albedo;
    vec3 emission;
    float metallic;
    float roughness;
};

struct Vertex {
    vec3 position;
    vec3 normal;
    vec2 uv;
};

struct Index {
    int idx0;
    int idx1;
    int idx2;
};

struct SceneObject {
    mat4 transform;
    vec3 albedo;
    vec3 emission;
    vec4 matParams;
};

struct Light {
    vec3 position;
    vec3 emission;
    vec3 u;
    vec3 v;
    float radius;
    float area;
    int type;
};

struct LightSample {
    vec3 surfacePos;
    vec3 normal;
    vec3 emission;
};

layout (binding = 0, rgba32f) uniform image2D traceImage;

layout(binding = 1) uniform GlobalSetting {
    vec3 cameraPosition;
    vec3 cameraRight;
    vec3 cameraUp;
    vec3 cameraFront;
    vec4 cameraParam;
    vec4 screenParam;
    int sceneBvhRootIndex;
    int sampleCounter;
    int numLight;
} globalSetting;

layout(std140, binding = 2) buffer SceneBvhNodeBuffer
{
    BvhNode sceneBvhNodes[ ];
};

layout(std140, binding = 3) buffer SceneObjectBuffer
{
    SceneObject sceneObjects[ ];
};

layout(std140, binding = 4) buffer SceneIndexBuffer
{
    Index sceneIndices[ ];
};

layout(std140, binding = 5) buffer SceneVertexBuffer
{
    Vertex sceneVertices[ ];
};

layout(std140, binding = 6) buffer SceneLightBuffer
{
    Light sceneLights[ ];
};

uvec2 seed;

float rand()
{
    seed += uvec2(1);
    uvec2 q = 1103515245U * ( (seed >> 1U) ^ (seed.yx) );
    uint  n = 1103515245U * ( (q.x) ^ (q.y >> 3U) );
    return float(n) * (1.0 / float(0xffffffffU));
}

float powerHeuristic(float a, float b)
{
    float t = a * a;
    return t / (b*b + t);
}

vec3 cosineSampleHemisphere(float u1, float u2)
{
    float r = sqrt(u1);
    float phi = 2.0 * PI * u2;
    float x = r * cos(phi);
    float y = r * sin(phi);
    float z = sqrt(max(0.0, 1.0 - x*x - y*y));
    return vec3(x, y, z);
}

vec3 uniformSampleSphere(float u1, float u2)
{
    float z = 1.0 - 2.0 * u1;
    float r = sqrt(max(0.f, 1.0 - z * z));
    float phi = 2.0 * PI * u2;
    float x = r * cos(phi);
    float y = r * sin(phi);

    return vec3(x, y, z);
}

void sampleSphereLight(in Light light, inout LightSample lightSample)
{
    float r1 = rand();
    float r2 = rand();

    lightSample.surfacePos = light.position + uniformSampleSphere(r1, r2) * light.radius;
    lightSample.normal = normalize(lightSample.surfacePos - light.position);
    lightSample.emission = light.emission * float(globalSetting.numLight);
}

void sampleQuadLight(in Light light, inout LightSample lightSample)
{
    float r1 = rand();
    float r2 = rand();

    lightSample.surfacePos = light.position + light.u * r1 + light.v * r2;
    lightSample.normal = normalize(cross(light.u, light.v));
    lightSample.emission = light.emission * float(globalSetting.numLight);
}

void sampleLight(in Light light, inout LightSample lightSample)
{
    if (light.type == 0)
        sampleQuadLight(light, lightSample);
    else
        sampleSphereLight(light, lightSample);
}

vec3 emitterSample(in Ray ray, bool specularBounce, int depth, float lightPdf, float bsdfPdf, vec3 emission)
{
    vec3 Le;
    if (depth == 0 || specularBounce)
        Le = emission;
    else
        Le = powerHeuristic(bsdfPdf, lightPdf) * emission;

    return Le;
}

vec3 microfacetSampler(in Ray ray, inout IntersectData isect)
{
    vec3 N = isect.normal;
    vec3 V = -ray.direction;
    vec3 dir;
    float r1 = rand();
    float r2 = rand();

    vec3 upVector = abs(N.z) < 0.999 ? vec3(0, 0, 1) : vec3(1, 0, 0);
    vec3 tangentX = normalize(cross(upVector, N));
    vec3 tangentY = cross(N, tangentX);

    dir = cosineSampleHemisphere(r1, r2);
    dir = tangentX * dir.x + tangentY * dir.y + N * dir.z;
    return dir;
}

float microfacetPdf(in Ray ray, in vec3 bsdfDir, inout IntersectData isect)
{
    vec3 N = isect.normal;
    vec3 L = bsdfDir;
    return abs(dot(L, N)) * (1.0 / PI);
}

vec3 microfacetEval(in Ray ray, in vec3 bsdfDir, inout IntersectData isect)
{
    return isect.albedo / PI;
}

float intersectAABB(vec3 minCorner, vec3 maxCorner, Ray r)
{
    vec3 invdir = 1.0 / r.direction;

    vec3 f = (maxCorner - r.origin) * invdir;
    vec3 n = (minCorner - r.origin) * invdir;

    vec3 tmax = max(f, n);
    vec3 tmin = min(f, n);

    float t1 = min(tmax.x, min(tmax.y, tmax.z));
    float t0 = max(tmin.x, max(tmin.y, tmin.z));

    return (t1 >= t0) ? (t0 > 0.f ? t0 : t1) : -1.0;
}

float intersectSphere(Ray r, float rad, vec3 pos)
{
    vec3 op = pos - r.origin;
    float eps = 0.001;
    float b = dot(op, r.direction);
    float det = b * b - dot(op, op) + rad * rad;
    if (det < 0.0)
    return INFINITY;

    det = sqrt(det);
    float t1 = b - det;
    if (t1 > eps)
    return t1;

    float t2 = b + det;
    if (t2 > eps)
    return t2;

    return INFINITY;
}

float intersectRect(in Ray r, in vec3 pos, in vec3 u, in vec3 v, in vec4 plane)
{
    vec3 n = vec3(plane);
    float dt = dot(r.direction, n);
    float t = (plane.w - dot(n, r.origin)) / dt;
    if (t > EPS)
    {
        vec3 p = r.origin + r.direction * t;
        vec3 vi = p - pos;
        float a1 = dot(u, vi);
        if (a1 >= 0. && a1 <= 1.)
        {
            float a2 = dot(v, vi);
            if (a2 >= 0. && a2 <= 1.)
            return t;
        }
    }

    return INFINITY;
}

Ray genCameraRay()
{
    float width = float(globalSetting.screenParam.x);
    float height = float(globalSetting.screenParam.y);
    float invWidth = 1.0 / width;
    float invHeight = 1.0 / height;
    float aspectratio = width / height;
    float fov = 45.0 * 3.1415926 / 180.0;
    float angle = tan(0.5 * fov);

    float x = float(gl_GlobalInvocationID.x) + rand() - 0.5f;
    float y = float(gl_GlobalInvocationID.y) + rand() - 0.5f;

    x = (2.0f * ((x + 0.5f) * invWidth) - 1) * angle * aspectratio;
    y = (1.0f - 2.0f * ((y + 0.5f) * invHeight)) * angle;

    vec3 dir = normalize(x * globalSetting.cameraRight + y * globalSetting.cameraUp + globalSetting.cameraFront);

    Ray ray;
    ray.origin = globalSetting.cameraPosition;
    ray.direction = dir;
    return ray;
}

bool occludedHit(Ray ray, float maxDist)
{
    int stack[64];
    int stackFlag = 0;
    stack[stackFlag++] = -1;
    int nodeIdx = globalSetting.sceneBvhRootIndex;
    float leftHit = 0.0;
    float rightHit = 0.0;
    int curMeshIdx = 0;
    bool downBvh = false;
    mat4 tempTransform;
    Ray transformRay;
    transformRay.origin = ray.origin;
    transformRay.direction = ray.direction;
    while(nodeIdx > -1 || downBvh)
    {
        if(downBvh && nodeIdx < 0)
        {
            downBvh = false;
            nodeIdx = stack[--stackFlag];
            transformRay.origin = ray.origin;
            transformRay.direction = ray.direction;
            continue;
        }
        BvhNode node = sceneBvhNodes[nodeIdx];
        if(node.leaf == 1)
        {
            for (int i = 0; i < node.rightIndex; i++)
            {
                Index triIndices = sceneIndices[node.leftIndex + i];
                vec3 v0 = sceneVertices[triIndices.idx0].position;
                vec3 v1 = sceneVertices[triIndices.idx1].position;
                vec3 v2 = sceneVertices[triIndices.idx2].position;

                vec3 e0 = v1 - v0;
                vec3 e1 = v2 - v0;
                vec3 p = cross(transformRay.direction, e1);
                float a = dot(e0, p);
                if(abs(a) < 0.0001)
                continue;
                float f = 1.0 / a;
                vec3 s = transformRay.origin - v0;
                float u = f * dot(s, p);

                if(u < 0.0 || u > 1.0)
                continue;
                vec3 q = cross(s, e0);
                float v = f * dot(transformRay.direction, q);
                if(v < 0.0 || (u + v) > 1.0)
                continue;
                float t = dot(e1, q) * f;
                if(t > 0.0 && t < maxDist)
                {
                    return false;
                }
            }
        }
        else if(node.leaf == 2)
        {
            nodeIdx = node.leftIndex;
            curMeshIdx = node.rightIndex;
            downBvh = true;
            stack[stackFlag++] = -1;
            tempTransform = sceneObjects[curMeshIdx].transform;
            transformRay.origin = vec3(inverse(tempTransform) * vec4(ray.origin, 1.0));
            transformRay.direction = vec3(inverse(tempTransform) * vec4(ray.direction, 0.0));
            continue;
        }
        else
        {
            BvhNode lc = sceneBvhNodes[node.leftIndex];
            BvhNode rc = sceneBvhNodes[node.rightIndex];

            leftHit = intersectAABB(lc.bboxMin, lc.bboxMax, transformRay);
            rightHit = intersectAABB(rc.bboxMin, rc.bboxMax, transformRay);

            if (leftHit > 0.0 && rightHit > 0.0)
            {
                int deferred = -1;
                if (leftHit > rightHit)
                {
                    nodeIdx = node.rightIndex;
                    deferred = node.leftIndex;
                }
                else
                {
                    nodeIdx = node.leftIndex;
                    deferred = node.rightIndex;
                }
                stack[stackFlag++] = deferred;
                continue;
            }
            else if (leftHit > 0.)
            {
                nodeIdx = node.leftIndex;
                continue;
            }
            else if (rightHit > 0.)
            {
                nodeIdx = node.rightIndex;
                continue;
            }
        }
        nodeIdx = stack[--stackFlag];
    }
    return false;
}

void hit(Ray ray, inout IntersectData isect, inout float lightPdf, inout vec3 lightEmission)
{
    float closestDist = INFINITY;
    float d;
    isect.objIdx = 0;
    isect.hit = false;
    for (int i = 0; i < globalSetting.numLight; i++)
    {
        Light light = sceneLights[i];
        if (light.type == 0)
        {
            vec3 position = light.position;
            vec3 u = light.u;
            vec3 v = light.v;
            vec3 normal = normalize(cross(u, v));
            vec4 plane = vec4(normal, dot(normal, position));
            u *= 1.0f / dot(u, u);
            v *= 1.0f / dot(v, v);

            d = intersectRect(ray, position, u, v, plane);
            if (d < 0.0)
                d = INFINITY;
            if (d < closestDist)
            {
                closestDist = d;
                float cosTheta = dot(-ray.direction, normal);
                float pdf = (closestDist * closestDist) / (light.area * cosTheta);
                lightEmission = light.emission;
                lightPdf = pdf;
                isect.hit = true;
                isect.isEmitter = true;
            }
        }
        if (light.type == 1)
        {
            d = intersectSphere(ray, light.radius, light.position);
            if (d < 0.0)
                d = INFINITY;
            if (d < closestDist)
            {
                closestDist = d;
                float pdf = (d * d) / light.area;
                lightEmission = light.emission;
                lightPdf = pdf;
                isect.hit = true;
                isect.isEmitter = true;
            }
        }
    }

    int stack[64];
    int stackFlag = 0;
    stack[stackFlag++] = -1;
    int nodeIdx = globalSetting.sceneBvhRootIndex;
    float leftHit = 0.0;
    float rightHit = 0.0;
    int curMeshIdx = 0;
    bool downBvh = false;
    mat4 tempTransform;
    Ray transformRay;
    transformRay.origin = ray.origin;
    transformRay.direction = ray.direction;
    while(nodeIdx > -1 || downBvh)
    {
        if(downBvh && nodeIdx < 0)
        {
            downBvh = false;
            nodeIdx = stack[--stackFlag];
            transformRay.origin = ray.origin;
            transformRay.direction = ray.direction;
            continue;
        }
        BvhNode node = sceneBvhNodes[nodeIdx];
        if(node.leaf == 1)
        {
            for (int i = 0; i < node.rightIndex; i++)
            {
                Index triIndices = sceneIndices[node.leftIndex + i];
                vec3 v0 = sceneVertices[triIndices.idx0].position;
                vec3 v1 = sceneVertices[triIndices.idx1].position;
                vec3 v2 = sceneVertices[triIndices.idx2].position;

                vec3 e0 = v1 - v0;
                vec3 e1 = v2 - v0;
                vec3 p = cross(transformRay.direction, e1);
                float a = dot(e0, p);
                if(abs(a) < 0.0001)
                    continue;
                float f = 1.0 / a;
                vec3 s = transformRay.origin - v0;
                float u = f * dot(s, p);

                if(u < 0.0 || u > 1.0)
                    continue;
                vec3 q = cross(s, e0);
                float v = f * dot(transformRay.direction, q);
                if(v < 0.0 || (u + v) > 1.0)
                    continue;
                float t = dot(e1, q) * f;
                if(t > 0.0 && t < closestDist)
                {
                    closestDist = t;
                    isect.hit = true;
                    isect.isEmitter = false;
                    isect.hitDist = t;
                    isect.objIdx = curMeshIdx;
                    isect.triIdx = ivec3(triIndices.idx0, triIndices.idx1, triIndices.idx2);
                    isect.bary = vec3(u, v, 1.0 - u - v);
                    isect.hitPosition = transformRay.origin + transformRay.direction * t;
                    isect.hitPosition = vec3(tempTransform * vec4(isect.hitPosition, 1.0));
                    vec3 n0 = sceneVertices[triIndices.idx0].normal;
                    vec3 n1 = sceneVertices[triIndices.idx1].normal;
                    vec3 n2 = sceneVertices[triIndices.idx2].normal;
                    vec3 normal = normalize(n0 * u + n1 * v + n2 * (1.0 - u - v));
                    mat3 normalMatrix = transpose(inverse(mat3(tempTransform)));
                    isect.normal = normalize(normalMatrix * normal);
                    isect.albedo = sceneObjects[isect.objIdx].albedo;
                    isect.emission = sceneObjects[isect.objIdx].emission;
                    isect.metallic = sceneObjects[isect.objIdx].matParams.x;
                    isect.roughness = sceneObjects[isect.objIdx].matParams.y;
                }
            }
        }
        else if(node.leaf == 2)
        {
            nodeIdx = node.leftIndex;
            curMeshIdx = node.rightIndex;
            downBvh = true;
            stack[stackFlag++] = -1;
            tempTransform = sceneObjects[curMeshIdx].transform;
            transformRay.origin = vec3(inverse(tempTransform) * vec4(ray.origin, 1.0));
            transformRay.direction = vec3(inverse(tempTransform) * vec4(ray.direction, 0.0));
            continue;
        }
        else
        {
            BvhNode lc = sceneBvhNodes[node.leftIndex];
            BvhNode rc = sceneBvhNodes[node.rightIndex];

            leftHit = intersectAABB(lc.bboxMin, lc.bboxMax, transformRay);
            rightHit = intersectAABB(rc.bboxMin, rc.bboxMax, transformRay);

            if (leftHit > 0.0 && rightHit > 0.0)
            {
                int deferred = -1;
                if (leftHit > rightHit)
                {
                    nodeIdx = node.rightIndex;
                    deferred = node.leftIndex;
                }
                else
                {
                    nodeIdx = node.leftIndex;
                    deferred = node.rightIndex;
                }
                stack[stackFlag++] = deferred;
                continue;
            }
            else if (leftHit > 0.)
            {
                nodeIdx = node.leftIndex;
                continue;
            }
            else if (rightHit > 0.)
            {
                nodeIdx = node.rightIndex;
                continue;
            }
        }
        nodeIdx = stack[--stackFlag];
    }
}

vec3 directLight(in Ray ray, in IntersectData isect)
{
    vec3 L = vec3(0.0);
    vec3 surfacePos = isect.hitPosition + isect.normal * EPS;

    if (globalSetting.numLight > 0)
    {
        int index = int(rand() * float(globalSetting.numLight));
        Light light = sceneLights[index];
        LightSample lightSample;
        sampleLight(light, lightSample);

        vec3 lightDir = lightSample.surfacePos - surfacePos;
        float lightDist = length(lightDir);
        float lightDistSq = lightDist * lightDist;
        lightDir /= sqrt(lightDistSq);

        if (dot(lightDir, isect.normal) <= 0.0 || dot(lightDir, lightSample.normal) >= 0.0)
            return L;

        Ray shadowRay = Ray(surfacePos, lightDir);
        bool inShadow = occludedHit(shadowRay, lightDist - EPS);

        if (!inShadow)
        {
            float bsdfPdf = microfacetPdf(ray, lightDir, isect);
            vec3 f = microfacetEval(ray, lightDir, isect);
            float lightPdf = lightDistSq / (light.area * abs(dot(lightSample.normal, lightDir)));
            if(lightPdf > 0)
                L += powerHeuristic(lightPdf, bsdfPdf) * f * abs(dot(isect.normal, lightDir)) * lightSample.emission / lightPdf;
        }
    }

    return L;
}

vec3 pathTrace(Ray ray)
{
    vec3 radiance = vec3(0.0);
    vec3 throughput = vec3(1.0);
    vec3 bsdfDir;
    float bsdfPdf;
    vec3 lightEmission;
    float lightPdf;

    for(int depth = 0; depth < 3; depth++)
    {
        IntersectData isect;
        hit(ray, isect, lightPdf, lightEmission);
        if(!isect.hit)
        {
            break;
        }
        else
        {
            if (isect.isEmitter)
            {
                radiance += lightEmission * throughput;
                break;
            }
            //radiance += isect.emission * throughput;
            radiance += directLight(ray, isect) * throughput;
            bsdfDir = microfacetSampler(ray, isect);
            bsdfPdf = microfacetPdf(ray, bsdfDir, isect);
            if(bsdfPdf <= 0.0)
                break;
            throughput *= microfacetEval(ray, bsdfDir, isect) * abs(dot(isect.normal, bsdfDir)) / bsdfPdf;
            ray.origin = isect.hitPosition + ray.direction * EPS;
            ray.direction = bsdfDir;
        }
    }

    return radiance;
}

void main()
{
    seed = uvec2(globalSetting.sampleCounter, globalSetting.sampleCounter + 1) * uvec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    Ray ray = genCameraRay();
    vec3 color = vec3(0.0);

    color = pathTrace(ray);

    vec4 res = vec4(color, 1.0);
    imageStore(traceImage, ivec2(gl_GlobalInvocationID.xy), res);
}